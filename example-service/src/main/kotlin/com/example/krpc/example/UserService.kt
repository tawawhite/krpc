package com.example.krpc.example

import com.example.krpc.Serialization
import com.example.krpc.Try
import com.example.krpc.makeRpc
import com.example.krpc.makeRpcOrThrow
import kotlinx.serialization.SerialId
import kotlinx.serialization.Serializable

// @SerialId is not necessary if not using protobuf serialization.
@Serializable
data class User(
    @SerialId(1) val id: Int,
    @SerialId(2) val firstName: String,
    @SerialId(3) val lastName: String
)

@Serializable
data class GetRequest(
    @SerialId(1) val id: Int
)

@Serializable
data class GetResponse(
    @SerialId(1) val user: User
)

interface UserService {
    // This dummy companion would be generated by compiler plugin.
    companion object;

    suspend fun getUser(request: GetRequest): GetResponse

    suspend fun tryGetUser(request: GetRequest): Try<GetResponse>
}

// ###############################################################
// ### All code below would be generated by a compiler plugin. ###
// ###############################################################

fun UserService.Companion.client(
    url: String,
    serialization: Serialization
) = object : UserService {
    override suspend fun getUser(request: GetRequest): GetResponse {
        return makeRpcOrThrow(
            url,
            "UserService",
            "getUser",
            serialization,
            request,
            GetRequest.serializer(),
            Try.serializer(GetResponse.serializer())
        )
    }

    override suspend fun tryGetUser(request: GetRequest): Try<GetResponse> {
        return makeRpc(
            url,
            "UserService",
            "tryGetUser",
            serialization,
            request,
            GetRequest.serializer(),
            Try.serializer(GetResponse.serializer())
        )
    }
}
