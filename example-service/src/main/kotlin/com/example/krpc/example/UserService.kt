package com.example.krpc.example

import com.example.krpc.Serialization
import com.example.krpc.makeRpc
import io.ktor.client.HttpClient
import kotlinx.serialization.SerialId
import kotlinx.serialization.Serializable

// @SerialId is not necessary if not using protobuf serialization.
@Serializable
data class User(
    @SerialId(1) val id: Int,
    @SerialId(2) val firstName: String,
    @SerialId(3) val lastName: String
)

@Serializable
data class GetRequest(
    @SerialId(1) val id: Int
)

@Serializable
data class GetResponse(
    @SerialId(1) val user: User
)

interface UserService {
    // This dummy companion would be generated by compiler plugin.
    companion object;

    suspend fun getUser(request: GetRequest): GetResponse
}

// ###############################################################
// ### All code below would be generated by a compiler plugin. ###
// ###############################################################

fun UserService.Companion.client(
    httpClient: HttpClient,
    baseUrl: String,
    serialization: Serialization
) = object : UserService {
    override suspend fun getUser(request: GetRequest): GetResponse {
        val url = "$baseUrl/UserService/getUser"
        return makeRpc(httpClient, url, serialization, request, GetRequest.serializer(), GetResponse.serializer())
    }
}
