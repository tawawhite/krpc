package com.example.krpc.example

import com.example.krpc.Error
import com.example.krpc.Krpc
import com.example.krpc.RpcHandler
import com.example.krpc.ServiceHandler
import com.example.krpc.Try
import io.ktor.application.install
import io.ktor.features.CORS
import io.ktor.server.engine.embeddedServer
import io.ktor.server.netty.Netty

object UserServiceImpl : UserService {
    override suspend fun getUser(request: GetRequest): GetResponse {
        if (request.id < 0) throw NoSuchElementException("Message from exception")
        return GetResponse(User(request.id, "Foo", "Bar"))
    }

    override suspend fun tryGetUser(request: GetRequest) = Try {
        if (request.id < 0) raise(Error.INVALID_ARGUMENT, "Failure message")
        GetResponse(User(request.id, "Foo", "Bar"))
    }
}

fun main(args: Array<String>) {
    embeddedServer(Netty, port = 8080) {
        install(CORS) {
            anyHost() // For JS.
        }
        install(Krpc) {
            services = listOf(UserService.handler(UserServiceImpl))
        }
    }.start()
}

// ###############################################################
// ### All code below would be generated by a compiler plugin. ###
// ###############################################################

fun UserService.Companion.handler(userService: UserService) = object : ServiceHandler {
    override val serviceName: String = "UserService"

    override fun rpcHandler(rpc: String): RpcHandler<*, *>? {
        return when (rpc) {
            "getUser" -> com.example.krpc.unsafeRpcHandler(GetRequest.serializer(), Try.serializer(GetResponse.serializer()), userService::getUser)
            "tryGetUser" -> com.example.krpc.rpcHandler(GetRequest.serializer(), Try.serializer(GetResponse.serializer()), userService::tryGetUser)
            else -> null
        }
    }
}
